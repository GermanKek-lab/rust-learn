fn main() {
    let mut list = vec![1, 2, 3, 4, 5];

    list.push(6);

    println!("{}", list.first().unwrap()); // получение первого эл-та, как .get(0)
    println!("{}", list.last().unwrap()); // получение последнего эл-та, как .get(list.len() - 1)
    println!("{}", list.len()); // получение длины вектора
    println!("{}", list.is_empty()); // проверка вектора на пустоту

    /* Ёмкость вектора */
    println!("{}", list.capacity()); // Ёмкость вектора - сколько ечеек памяти зарезервированно под вектор, чтобы не перераспределять память
    let mut list_fix_capacity: Vec<i32> = Vec::with_capacity(5); // создание вектора с фиксироаванной ёмкостью
    /* Память начинает перераспределяться, только после наполнения 5 элементов */


    /* Очистка вектора */
    list.clear(); // очищает вектор, но не влияет на ёмкость
    let el = list.remove(2); // удаляет и возвращает конкретный эл-нт, на ёмкость не влияет
    let last_el = list.pop(); // удаляет и возвращает последнего эл-нт, на ёмкость не влияет

    /* Урезание вектора */
    list.truncate(2); // урезает вектор до 2 первых элемента, на ёмкость не влияет

    /* Соеденение вектрров */
    let mut list1 = vec![1, 2, 3, 4, 5];
    let mut list2 = vec![6, 7, 8, 9, 10];

    list1.append(&mut list2); // добавляет из эл-ты из list2 -> list1, и из листа2 элементы удаляются
    println!("{:?}, {:?}", list1, list2);
}